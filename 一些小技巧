# -*- coding: UTF-8 -*-


##TrueFalse当数字用
MAXIMUM = lambda x,y :  (x > y) * x + (x < y) * y
MINIMUM = lambda x,y :  (x > y) * y + (x < y) * x

list.append(obj): 将obj作为一个整体添加到list列表中(末尾) obj为任意数据类型

print ([[x for x in range(1,100)] [i:i+3] for i in range(0,100,3)])
[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], 
[22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39], [40, 41, 42], 
[43, 44, 45], [46, 47, 48], [49, 50, 51], [52, 53, 54], [55, 56, 57], [58, 59, 60], [61, 62, 63], 
[64, 65, 66], [67, 68, 69], [70, 71, 72], [73, 74, 75], [76, 77, 78], [79, 80, 81], [82, 83, 84],
[85, 86, 87], [88, 89, 90], [91, 92, 93], [94, 95, 96], [97, 98, 99], []]
 
if __name__ == '__main__':
    a = 10
    b = 20
    print ('The largar one is %d' % MAXIMUM(a,b))
    print ('The lower one is %d' % MINIMUM(a,b))

#判断列表为空
a = []
print(not a)#True

##列表的值分别存入变量
>>> a = [1, 2, 3]
>>> x, y, z = a 
>>> x
1
>>> y
2
>>> z
3

##字符串乘以数字
>>> print "code"*4+' '+"mentor"*5
codecodecodecode mentormentormentormentormentor

##合并二维数组
a = [[1, 2], [3, 4], [5, 6]]
>>> import itertools 
>>> list(itertools.chain.from_iterable(a))
[1, 2, 3, 4, 5, 6]

##判断两个字符串是不是anagrams
from collections import Counter
def is_anagram(str1, str2):
     return Counter(str1) == Counter(str2)
>>> is_anagram('abcd','dbca')
True
>>> is_anagram('abcd','dbaa')
False

##输入N个数字返回list
result = map(lambda x:int(x) ,input().split())
print(list(result))
1 2 3 4 5
>>>[1, 2, 3, 4, 5]

##
a = 'qwer'
l = list(a)
print(l)##['q', 'w', 'e', 'r']

#两个list相加
l1 = ['aa','ss']
l2 = ['cc','dd']
print(l1+l2)#['aa', 'ss', 'cc', 'dd']

##list转化为dict
i = ['a', 'b']
l = [1, 2]
print dict([i,l])##{'a': 'b', 1: 2}

##
>>> mat = [[1, 2, 3], [4, 5, 6]]
>>> zip(*mat)
[(1, 4), (2, 5), (3, 6)]

##
List 1 = ['a', 'b', 'c', 'd']
List 2 = ['p', 'q', 'r', 's']
>>> for x, y in zip(list1,list2):
...    print x, y
...
a p
b q
c r
d s
