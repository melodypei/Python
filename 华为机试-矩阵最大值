题目描述：
给定一个仅包含0和1的N*N二维矩阵，请计算二维矩阵的最大值，计算规则如下：

每行元素按下标顺序组成一个二进制数（下标越大越排在低位），二进制数的值就是该行的值。矩阵各行值之和为矩阵的值。
允许通过向左或向右整体循环移动每行元素来改变各元素在行中的位置。 比如：
[1,0,1,1,1]向右整体循环移动2位变为[1,1,1,0,1]，二进制数为11101，值为29。
[1,0,1,1,1]向左整体循环移动2位变为[1,1,1,1,0]，二进制数为11110，值为30。
输入描述:
输入的第一行为正整数，记录了N的大小，0 < N <= 20。
输入的第2到N+1行为二维矩阵信息，行内元素半角逗号分隔。
输出描述：
矩阵的最大值。

N = int(input())
if 0 < N <= 20:
    res = 0
    for i in range(N):
        max_list= []
        input_list = input().split(',')
        for j in range(1,N+1):
            element_list = input_list[j:]+input_list[0:j]
            tmp = ''.join(k for k in element_list)
            max_list.append(int(tmp,2))
        res += max(max_list)
    print(res)
else:
    print('ERROR!')
    
    
N = int(input("请输入："))
total = 0
for i in range(N):
    matrix = input().split(',')
    maxvalue = 0
    for i in range(len(matrix)):
        if '1' == matrix[i]:
            ss = ''
            for m in range(i, len(matrix)):
                ss += matrix[m]
            for n in range(0, i):
                ss += matrix[n]
            maxvalue = max(maxvalue, int(ss, 2))
    total += maxvalue
print(total) 
